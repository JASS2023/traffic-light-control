name: Build

env:
  HARBOR_URL: harbor.mtze.me
  HARBOR_PROJECT: jass23
  IMAGE_NAME: traffic-light-control
  MQTT_BROKER_IP: 192.168.0.223
  MQTT_BROKER_PORT: 1883
  TRAFFIC_LIGHT_GROUP: 1 

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.output-tag.outputs.image_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Install Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Compute Tag
        uses: actions/github-script@v6
        id: compute-tag
        with:
          result-encoding: string
          script: |
            if (context.eventName === "pull_request") {
              return "pr-" + context.issue.number;
            }
            if (context.eventName === "push") {
              if (context.ref.startsWith("refs/tags/")) {
                return context.ref.slice(10);
              }
              if (context.ref === "refs/heads/develop") {
                return "develop";
              }
            }
            return "latest";

      - id: output-tag
        run: echo "image_version=${{ steps.compute-tag.outputs.result }}" >> "$GITHUB_OUTPUT"

      - name: Build Image and Push to GitHub Container Registry
        uses: docker/build-push-action@v2
        env:
          IMAGE_VERSION: ${{ steps.compute-tag.outputs.result }}
        with:
          context: .
          tags: ghcr.io/jass2023/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          platforms: linux/amd64,linux/arm64/v8
          push: true

  deploy:
    needs: [build]
    includes_only:
      runs-on: self-hosted
      strategy:
      matrix:
        include:
          - role: "leader"
            pi: "p1"
          - role: "follower"
            pi: "p2"
        steps:
          - name: Deploy
            uses: actions/checkout@v3
            with:
              fetch-depth: 1

          - name: Create env file for leader traffic light
            if: ${{ matrix.role }} == "leader"
            run: |
              touch .env
              echo "
              MQTT_BROKER_IP=${{ env.MQTT_BROKER_IP }}
              MQTT_BROKER_PORT=${{ env.MQTT_BROKER_PORT }}
              TRAFFIC_LIGHT_ID=${{ env.TRAFFIC_LIGHT_ID }}
              TRAFFIC_LIGHT_GROUP=${{ env.TRAFFIC_LIGHT_GROUP }}
              TRAFFIC_LIGHT_ID=1
              TRAFFIC_LIGHT_IS_LEADER="TRUE" > .env

          - name: Create env file for follower traffic light
          if: ${{ matrix.role }} == "follower"
          run: |
            touch .env
            echo "
            MQTT_BROKER_IP=${{ env.MQTT_BROKER_IP }}
            MQTT_BROKER_PORT=${{ env.MQTT_BROKER_PORT }}
            TRAFFIC_LIGHT_ID=${{ env.TRAFFIC_LIGHT_ID }}
            TRAFFIC_LIGHT_GROUP=${{ env.TRAFFIC_LIGHT_GROUP }}
            TRAFFIC_LIGHT_ID=2
            TRAFFIC_LIGHT_IS_LEADER=FALSE" > .env

          - name: Create manifest
            env:
              IMAGE_VERSION: ${{ needs.build.outputs.image_version }}
            run: |
              touch manifest.yml
              echo "
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: traffic-light-control
              spec:
                replicas: 1
                strategy:
                  type: Recreate
                selector:
                  matchLabels:
                    app: traffic-light-control
                template:
                  metadata:
                    labels:
                      app: traffic-light-control
                  spec:
                    containers:
                      - name: traffic-light-control
                        image: ghcr.io/jass2023/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
                        imagePullPolicy: Always
                        securityContext:
                          privileged: true
                        volumeMounts:
                          - name: dev-gpiomem
                            mountPath: /dev/gpiomem
                    volumes:
                      - name: dev-gpiomem
                        hostPath:
                          path: /dev/gpiomem" > manifest.yml
          - name: Set Kube Config
            run: kubectl rollout restart -f manifest.yml